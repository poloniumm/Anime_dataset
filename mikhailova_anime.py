# -*- coding: utf-8 -*-
"""Mikhailova_anime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lHt0xtpDZhrjOG_AuETZDU25M-0uDpgN

1. Код для скачивания датасета "anime.csv"
"""

!wget -O "anime.csv" "https://drive.google.com/uc?id=1bAbPm8D7NefuoAvMMgZYSZ99dHPpEvcO&export>=download"

"""2. Считывание файла"""

import pandas as pd

df = pd.read_csv('anime.csv')

"""3. Вывод первых 10 строк датасета"""

df.head(10)

"""4. Вывод информации о колонках датасета:
 
a)название:

"""

print(df.columns)

"""б) тип значений:"""

df.dtypes

"""5. Приведение названий колонок к единому виду: все символы в названии колонок должны быть в нижнем регистре, между словами в названии должен быть символ «_» (изменения делать с помощью dataframe.columns)"""

def column_name_preprocess(col_name):
  col_name = col_name.replace(' ', '_')
  return col_name

column_names = df.columns
df.columns = [column_name_preprocess(col_name).title() for col_name in column_names]
df.columns = map(str.lower, df.columns)
print(df.columns)

print(df['voters'])

def numberiz(a):     #привожу неучтённые ранее числовые значения к int виду (количество эпизодов и людей - целое)
  a = a.replace(',','')
  a = a.replace('?','0')
  return int(a)
df['voters'] = list(map(numberiz, df['voters']))
df['episodes'] = list(map(numberiz, df['episodes']))
sredn = df['episodes'].mean()
df['episodes'] = df['episodes'].replace('0', sredn)

"""6. Построение статистики для колонок, содержащих числовые значения: min, max, mean, median, std, 25, 75, 90 перцентиль (pandas.describe())"""

#df['voters'].where(~(df.a < 0), other=0, inplace=True)
#df[['voters']].astype(float)
df.describe()

print(df.nunique()) #Проверка, где категориальные признаки => production, source, genre, theme

#print(df['production'].unique()) #выводим список значений категориальных признаков
#prod = df['production'].unique()
print(df['production'].value_counts())
print(df['source'].value_counts())
print(df['genre'].value_counts())
print(df['production'].value_counts())

df.isna() #есть ли пропуски

df.isna().any()

df['rating'].plot() # т.к. числовой признак, строим график, чёткой зависимости нет, пропущенные значения имеет смысл заменить средним для дальнейшего анализа

df['rating'].fillna(df['rating'].mean())

print('самая популярная студия - ', df['production'].value_counts().idxmax())
df['production'].hist(bins=100)

print('самое распространённое количество эпизодов - ', df['episodes'].value_counts().idxmax())
df['episodes'].hist()

top_dict = {} #ТОП-3 самых частых source
n_freq_items = 3
top_dict['source'] = df.source.value_counts()[:n_freq_items].index.tolist()
top_df = pd.DataFrame(top_dict)

print(top_df)

df['source'].hist() #общая гистограмма

df.theme.value_counts(sort=True) # количество аниме каждой темы
print('самая популярная тема - ', df['theme'].value_counts().idxmax())
df.theme.value_counts(sort=True).hist()

df.groupby('production')['rating'].mean()  #11 пункт, 3самые рейтинговые компании
df.groupby('production')['rating'].mean().hist()
df.head(3)
top_dict2 = {}
top_dict2['production'] = df['production'][:3].tolist()
top_df2 = pd.DataFrame(top_dict2)
top_df2

